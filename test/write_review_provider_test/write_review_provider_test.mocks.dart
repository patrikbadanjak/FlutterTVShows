// Mocks generated by Mockito 5.1.0 from annotations
// in tv_shows/test/write_review_provider_test/write_review_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_shows/common/models/review.dart' as _i3;
import 'package:tv_shows/common/models/show.dart' as _i2;
import 'package:tv_shows/common/models/user_review.dart' as _i8;
import 'package:tv_shows/source_remote/shows/shows_repository.dart' as _i7;
import 'package:tv_shows/ui/show_details/provider/review_provider.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeShow_0 extends _i1.Fake implements _i2.Show {}

class _FakeReview_1 extends _i1.Fake implements _i3.Review {}

/// A class which mocks [ReviewProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockReviewProvider extends _i1.Mock implements _i4.ReviewProvider {
  MockReviewProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Show get show =>
      (super.noSuchMethod(Invocation.getter(#show), returnValue: _FakeShow_0())
          as _i2.Show);
  @override
  String get errorMessage =>
      (super.noSuchMethod(Invocation.getter(#errorMessage), returnValue: '')
          as String);
  @override
  set errorMessage(String? _errorMessage) =>
      super.noSuchMethod(Invocation.setter(#errorMessage, _errorMessage),
          returnValueForMissingStub: null);
  @override
  _i5.Future<List<_i3.Review>> get reviews =>
      (super.noSuchMethod(Invocation.getter(#reviews),
              returnValue: Future<List<_i3.Review>>.value(<_i3.Review>[]))
          as _i5.Future<List<_i3.Review>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.Future<void> fetchReviews() =>
      (super.noSuchMethod(Invocation.method(#fetchReviews, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ShowsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockShowsRepository extends _i1.Mock implements _i7.ShowsRepository {
  MockShowsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Show>> getShows() =>
      (super.noSuchMethod(Invocation.method(#getShows, []),
              returnValue: Future<List<_i2.Show>>.value(<_i2.Show>[]))
          as _i5.Future<List<_i2.Show>>);
  @override
  _i5.Future<List<_i3.Review>> getReviewsForShow(int? showId) =>
      (super.noSuchMethod(Invocation.method(#getReviewsForShow, [showId]),
              returnValue: Future<List<_i3.Review>>.value(<_i3.Review>[]))
          as _i5.Future<List<_i3.Review>>);
  @override
  _i5.Future<_i3.Review> submitReviewForShow({_i8.UserReview? userReview}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #submitReviewForShow, [], {#userReview: userReview}),
              returnValue: Future<_i3.Review>.value(_FakeReview_1()))
          as _i5.Future<_i3.Review>);
}
